// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SIMS_ASM.Data;

#nullable disable

namespace SIMS_ASM.Migrations
{
    [DbContext(typeof(ApplicationDbContex))]
    [Migration("20250327113954_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SIMS_ASM.Models.Class", b =>
                {
                    b.Property<int>("ClassID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassID"));

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("MajorID")
                        .HasColumnType("int");

                    b.HasKey("ClassID");

                    b.HasIndex("MajorID");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("SIMS_ASM.Models.ClassCourseFaculty", b =>
                {
                    b.Property<int>("ClassCourseFacultyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassCourseFacultyID"));

                    b.Property<int>("ClassID")
                        .HasColumnType("int");

                    b.Property<int?>("ClassID1")
                        .HasColumnType("int");

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<int?>("CourseID1")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int?>("UserID1")
                        .HasColumnType("int");

                    b.HasKey("ClassCourseFacultyID");

                    b.HasIndex("ClassID");

                    b.HasIndex("ClassID1");

                    b.HasIndex("CourseID");

                    b.HasIndex("CourseID1");

                    b.HasIndex("UserID");

                    b.HasIndex("UserID1");

                    b.ToTable("ClassCourseFaculties");
                });

            modelBuilder.Entity("SIMS_ASM.Models.Course", b =>
                {
                    b.Property<int>("CourseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseID"));

                    b.Property<DateTime>("CourseEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CourseStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MajorID")
                        .HasColumnType("int");

                    b.HasKey("CourseID");

                    b.HasIndex("MajorID");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("SIMS_ASM.Models.Enrollment", b =>
                {
                    b.Property<int>("EnrollmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnrollmentID"));

                    b.Property<int>("ClassCourseFacultyID")
                        .HasColumnType("int");

                    b.Property<int?>("ClassCourseFacultyID1")
                        .HasColumnType("int");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int?>("UserID1")
                        .HasColumnType("int");

                    b.HasKey("EnrollmentID");

                    b.HasIndex("ClassCourseFacultyID");

                    b.HasIndex("ClassCourseFacultyID1");

                    b.HasIndex("UserID");

                    b.HasIndex("UserID1");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("SIMS_ASM.Models.Grade", b =>
                {
                    b.Property<int>("GradeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GradeID"));

                    b.Property<int>("EnrollmentID")
                        .HasColumnType("int");

                    b.Property<int?>("EnrollmentID1")
                        .HasColumnType("int");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("GradeID");

                    b.HasIndex("EnrollmentID");

                    b.HasIndex("EnrollmentID1");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("SIMS_ASM.Models.Major", b =>
                {
                    b.Property<int>("MajorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MajorID"));

                    b.Property<DateTime>("CourseEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CourseStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MajorName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("MajorID");

                    b.ToTable("Majors");
                });

            modelBuilder.Entity("SIMS_ASM.Models.StudentClass", b =>
                {
                    b.Property<int>("StudentClassID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentClassID"));

                    b.Property<int>("ClassID")
                        .HasColumnType("int");

                    b.Property<int?>("ClassID1")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int?>("UserID1")
                        .HasColumnType("int");

                    b.HasKey("StudentClassID");

                    b.HasIndex("ClassID");

                    b.HasIndex("ClassID1");

                    b.HasIndex("UserID");

                    b.HasIndex("UserID1");

                    b.ToTable("StudentClasses");
                });

            modelBuilder.Entity("SIMS_ASM.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("Date_of_birth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone_number")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserID");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users", t =>
                        {
                            t.HasCheckConstraint("CK_User_Role", "[Role] IN ('Student', 'Lecturer', 'Admin')");
                        });
                });

            modelBuilder.Entity("SIMS_ASM.Models.Class", b =>
                {
                    b.HasOne("SIMS_ASM.Models.Major", "Major")
                        .WithMany("Classes")
                        .HasForeignKey("MajorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Major");
                });

            modelBuilder.Entity("SIMS_ASM.Models.ClassCourseFaculty", b =>
                {
                    b.HasOne("SIMS_ASM.Models.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SIMS_ASM.Models.Class", null)
                        .WithMany("ClassCourseFaculties")
                        .HasForeignKey("ClassID1");

                    b.HasOne("SIMS_ASM.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SIMS_ASM.Models.Course", null)
                        .WithMany("ClassCourseFaculties")
                        .HasForeignKey("CourseID1");

                    b.HasOne("SIMS_ASM.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SIMS_ASM.Models.User", null)
                        .WithMany("ClassCourseFaculties")
                        .HasForeignKey("UserID1");

                    b.Navigation("Class");

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SIMS_ASM.Models.Course", b =>
                {
                    b.HasOne("SIMS_ASM.Models.Major", "Major")
                        .WithMany("Courses")
                        .HasForeignKey("MajorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Major");
                });

            modelBuilder.Entity("SIMS_ASM.Models.Enrollment", b =>
                {
                    b.HasOne("SIMS_ASM.Models.ClassCourseFaculty", "ClassCourseFaculty")
                        .WithMany()
                        .HasForeignKey("ClassCourseFacultyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SIMS_ASM.Models.ClassCourseFaculty", null)
                        .WithMany("Enrollments")
                        .HasForeignKey("ClassCourseFacultyID1");

                    b.HasOne("SIMS_ASM.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SIMS_ASM.Models.User", null)
                        .WithMany("Enrollments")
                        .HasForeignKey("UserID1");

                    b.Navigation("ClassCourseFaculty");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SIMS_ASM.Models.Grade", b =>
                {
                    b.HasOne("SIMS_ASM.Models.Enrollment", "Enrollment")
                        .WithMany()
                        .HasForeignKey("EnrollmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIMS_ASM.Models.Enrollment", null)
                        .WithMany("Grades")
                        .HasForeignKey("EnrollmentID1");

                    b.Navigation("Enrollment");
                });

            modelBuilder.Entity("SIMS_ASM.Models.StudentClass", b =>
                {
                    b.HasOne("SIMS_ASM.Models.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SIMS_ASM.Models.Class", null)
                        .WithMany("StudentClasses")
                        .HasForeignKey("ClassID1");

                    b.HasOne("SIMS_ASM.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SIMS_ASM.Models.User", null)
                        .WithMany("StudentClasses")
                        .HasForeignKey("UserID1");

                    b.Navigation("Class");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SIMS_ASM.Models.Class", b =>
                {
                    b.Navigation("ClassCourseFaculties");

                    b.Navigation("StudentClasses");
                });

            modelBuilder.Entity("SIMS_ASM.Models.ClassCourseFaculty", b =>
                {
                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("SIMS_ASM.Models.Course", b =>
                {
                    b.Navigation("ClassCourseFaculties");
                });

            modelBuilder.Entity("SIMS_ASM.Models.Enrollment", b =>
                {
                    b.Navigation("Grades");
                });

            modelBuilder.Entity("SIMS_ASM.Models.Major", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Courses");
                });

            modelBuilder.Entity("SIMS_ASM.Models.User", b =>
                {
                    b.Navigation("ClassCourseFaculties");

                    b.Navigation("Enrollments");

                    b.Navigation("StudentClasses");
                });
#pragma warning restore 612, 618
        }
    }
}
